%include "x86inc.asm"

%define			X265_MAX_TR_DYNAMIC_RANGE_ASM		15

extern pshuffq_zero
extern pshuffw_zero
extern CONVERT_W_TO_DW_CONST_SSSE3
extern pshuffd_w

%macro GET_XOFFSET_AND_XSHIFT_SSSE3				1
%if POS_FLAG == %1
	MOV ecx, SHIFT
	MOVD XSHIFT, ecx
	PSHUFB XSHIFT, [pshuffq_zero]
%else
	NEG SHIFT
	MOV ecx, SHIFT
	MOVD XSHIFT, ecx
	PSHUFB XSHIFT, [pshuffq_zero]
	MOV r0, 1
	DEC ecx
	SHL r0, cl
	MOVD XOFFSET, r0
	PSHUFB XOFFSET, [pshuffw_zero]
%endif
%endmacro


%macro X265_TR_QUANT_X_TRS_4_HELP_SSSE3			2
	GET_XOFFSET_AND_XSHIFT_SSSE3 %2
	MOV SRC, r0m
	MOV DST, r2m

	PXOR XSPACE0, XSPACE0

	MOV I, %1
%%X265_TR_QUANT_X_TRS_4_HELP_SSSE3_I_LABEL:
	MOVQ XMMR0, [SRC]
%if POS_FLAG == %2
	PSLLW XMMR0, XSHIFT
%else
	PADDW XMMR0, XOFFSET
	PSRAW XMMR0, XSHIFT
%endif
	PUNPCKLWD XMMR0, XSPACE0
	PMADDWD XMMR0, [CONVERT_W_TO_DW_CONST_SSSE3]
	MOVDQA [DST], XMMR0
	ADD SRC, r1m
	ADD SRC, r1m
	ADD DST, %1*4
	DEC I
	JNZ %%X265_TR_QUANT_X_TRS_4_HELP_SSSE3_I_LABEL
%endmacro

%macro X265_TR_QUANT_X_TRS_8_HELP_SSSE3			2
	GET_XOFFSET_AND_XSHIFT_SSSE3 %2
	MOV DST, r2m

	PXOR XSPACE0, XSPACE0

	MOV I, 0
%%X265_TR_QUANT_X_TRS_8_HELP_SSSE3_I_LABEL:
	MOV SRC, r1m
	IMUL SRC, I
	ADD SRC, SRC
	ADD SRC, r0m
	MOV J, %1
%%X265_TR_QUANT_X_TRS_8_HELP_SSSE3_J_LABEL:
	MOVDQU XMMR0, [SRC]
%if POS_FLAG == %2
	PSLLW XMMR0, XSHIFT
%else
	PADDW XMMR0, XOFFSET
	PSRAW XMMR0, XSHIFT
%endif
	MOVDQA XMMR1, XMMR0
	PUNPCKLWD XMMR0, XSPACE0
	PUNPCKHWD XMMR1, XSPACE0
	PMADDWD XMMR0, [CONVERT_W_TO_DW_CONST_SSSE3]
	PMADDWD XMMR1, [CONVERT_W_TO_DW_CONST_SSSE3]
	MOVDQA [DST], XMMR0
	MOVDQA [DST+16], XMMR1
	ADD SRC, 8*2
	ADD DST, 8*4
	SUB J, 8
	CMP J, 0
	JG %%X265_TR_QUANT_X_TRS_8_HELP_SSSE3_J_LABEL
	INC I
	CMP I, %1
	JL %%X265_TR_QUANT_X_TRS_8_HELP_SSSE3_I_LABEL
%endmacro


%macro X265_TR_QUANT_X_TRS_HELP_SSSE3			3
cglobal %1, 0, 7
	%define				I							r5
	%define				J							r4
	%define				SRC							r3
	%define				DST							r2
	%define				SHIFT						r2
	%define				XOFFSET						XMMR6
	%define				XSHIFT						XMMR5
	%define				XSPACE0						XMMR7
	%define				POS_FLAG					1
	%define				NEG_FLAG					2

	MOV SHIFT, X265_MAX_TR_DYNAMIC_RANGE_ASM
	SUB SHIFT, %3
	SUB SHIFT, r3m

	CMP SHIFT, 0
	JGE %%X265_TR_QUANT_X_TRS_POS_HELP_SSSE3_LABEL

%if 4 == %2
	X265_TR_QUANT_X_TRS_4_HELP_SSSE3 %2, NEG_FLAG
%else
	X265_TR_QUANT_X_TRS_8_HELP_SSSE3 %2, NEG_FLAG
%endif
	JMP %%X265_TR_QUANT_X_TRS_RETURN_HELP_SSSE3_LABEL

%%X265_TR_QUANT_X_TRS_POS_HELP_SSSE3_LABEL:
%if 4 == %2
	X265_TR_QUANT_X_TRS_4_HELP_SSSE3 %2, POS_FLAG
%else
	X265_TR_QUANT_X_TRS_8_HELP_SSSE3 %2, POS_FLAG
%endif

%%X265_TR_QUANT_X_TRS_RETURN_HELP_SSSE3_LABEL:
	RET
%endmacro




%macro X265_TR_QUANT_X_ITRS_4_HELP_SSSE3			2
	GET_XOFFSET_AND_XSHIFT_SSSE3 %2
	MOV SRC, r2m
	MOV DST, r0m

	MOV I, %1
%%X265_TR_QUANT_X_ITRS_4_HELP_SSSE3_I_LABEL:
	MOVDQA XMMR0, [SRC]
	PSHUFB XMMR0, XSHUFFDW
%if POS_FLAG == %2
	PSLLW XMMR0, XSHIFT
%else
	PADDW XMMR0, XOFFSET
	PSRAW XMMR0, XSHIFT
%endif
	MOVQ [DST], XMMR0
	ADD SRC, %1*4
	ADD DST, r1m
	ADD DST, r1m
	DEC I
	JNZ %%X265_TR_QUANT_X_ITRS_4_HELP_SSSE3_I_LABEL
%endmacro


%macro X265_TR_QUANT_X_ITRS_8_HELP_SSSE3			2
	GET_XOFFSET_AND_XSHIFT_SSSE3 %2
	MOV SRC, r2m

	MOV I, 0
%%X265_TR_QUANT_X_ITRS_8_HELP_SSSE3_I_LABEL:
	MOV DST, r1m
	IMUL DST, I
	ADD DST, DST
	ADD DST, r0m
	MOV J, %1
%%X265_TR_QUANT_X_ITRS_8_HELP_SSSE3_J_LABEL:
	MOVDQA XMMR0, [SRC]
	MOVDQA XMMR1, [SRC+16]
	PSHUFB XMMR0, XSHUFFDW
	PSHUFB XMMR1, XSHUFFDW
	MOVLHPS XMMR0, XMMR1
%if POS_FLAG == %2
	PSLLW XMMR0, XSHIFT
%else
	PADDW XMMR0, XOFFSET
	PSRAW XMMR0, XSHIFT
%endif
	MOVDQU [DST], XMMR0
	ADD SRC, 8*4
	ADD DST, 8*2
	SUB J, 8
	CMP J, 0
	JG %%X265_TR_QUANT_X_ITRS_8_HELP_SSSE3_J_LABEL
	INC I
	CMP I, %1
	JL %%X265_TR_QUANT_X_ITRS_8_HELP_SSSE3_I_LABEL
%endmacro



%macro X265_TR_QUANT_X_ITRS_HELP_SSSE3			3
cglobal %1, 0, 7
	%define				I							r5
	%define				J							r4
	%define				SRC							r3
	%define				DST							r2
	%define				SHIFT						r2
	%define				XOFFSET						XMMR6
	%define				XSHIFT						XMMR5
	%define				XSHUFFDW					XMMR4
	%define				XSPACE0						XMMR7
	%define				POS_FLAG					1
	%define				NEG_FLAG					2

	MOVDQA XSHUFFDW, [pshuffd_w]
	MOV SHIFT, X265_MAX_TR_DYNAMIC_RANGE_ASM
	SUB SHIFT, %3
	SUB SHIFT, r3m
	NEG SHIFT

	CMP SHIFT, 0
	JGE %%X265_TR_QUANT_X_TRS_POS_HELP_SSSE3_LABEL

%if 4 == %2
	X265_TR_QUANT_X_ITRS_4_HELP_SSSE3 %2, NEG_FLAG
%else
	X265_TR_QUANT_X_ITRS_8_HELP_SSSE3 %2, NEG_FLAG
%endif
	JMP %%X265_TR_QUANT_X_TRS_RETURN_HELP_SSSE3_LABEL

%%X265_TR_QUANT_X_TRS_POS_HELP_SSSE3_LABEL:
%if 4 == %2
	X265_TR_QUANT_X_ITRS_4_HELP_SSSE3 %2, POS_FLAG
%else
	X265_TR_QUANT_X_ITRS_8_HELP_SSSE3 %2, POS_FLAG
%endif

%%X265_TR_QUANT_X_TRS_RETURN_HELP_SSSE3_LABEL:
	RET
%endmacro



X265_TR_QUANT_X_TRS_HELP_SSSE3 tr_quant_x_trs_4x4_ssse3,    4, 2
X265_TR_QUANT_X_TRS_HELP_SSSE3 tr_quant_x_trs_8x8_ssse3,    8, 3
X265_TR_QUANT_X_TRS_HELP_SSSE3 tr_quant_x_trs_16x16_ssse3, 16, 4
X265_TR_QUANT_X_TRS_HELP_SSSE3 tr_quant_x_trs_32x32_ssse3, 32, 5

X265_TR_QUANT_X_ITRS_HELP_SSSE3 tr_quant_x_itrs_4x4_ssse3,    4, 2
X265_TR_QUANT_X_ITRS_HELP_SSSE3 tr_quant_x_itrs_8x8_ssse3,    8, 3
X265_TR_QUANT_X_ITRS_HELP_SSSE3 tr_quant_x_itrs_16x16_ssse3, 16, 4
X265_TR_QUANT_X_ITRS_HELP_SSSE3 tr_quant_x_itrs_32x32_ssse3, 32, 5


